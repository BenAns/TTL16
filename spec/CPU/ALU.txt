The ALU will be its own fully functional subsystem. All operations may be implemented
using it, though it may not directly support all operations.

Operations needed:
00001 - Addition
00011 - Subtration
00010 - Negation
01011 - Signed Comparison
01111 - Unsigned Comparison

10000 - Logical AND
10101 - Logical OR
11100 - Logical XOR
10110 - Complement

Left Shift (meant to be used with addition of the same number)
11010 - Arithetic Right Shift
11000 - Logical Right Shift
11110 - Left Rotate
11101 - Right Rotate

These opcodes are in big-endian order.

Flags:
Overflow - Set if the operation causes overflow (0000-0010, 1000)
Less - Set for operation 0011 if input 1 is less than input 2
Equal - Set for operation 0011 if input 1 is equal to input 2
Greater - Set for operation 0011 if input 1 is greater than input 2
Zero - Set if the result of an operation is 0

All these operations can be performed in one clock cycle using combinational logic.

Inputs: Two 16-bit integers (A, B), operation (five-bit number)
Outputs: One 16-bit integer (C), flags (overflow, less, equal, greater, zero)

If trying to use an illegal operation (i.e. when the operation is not one of
the numbers defined above), then the ALU has undefined behaviour.

For an operation that only needs one operand (i.e. negation, complement and
shifts), then the input B is used as this operand and A does not affect the
result. For an operation that needs two operands, A is interpreted as the
left operand and B is interpreted as the right operand if required.

The output 16-bit integer is not defined for signed or unsigned comparisons.

The overflow flag is not defined for subtraction, negation, signed comparison or unsigned
comparison. For clarity, it is zero for all rotations.

The zero flag is not defined for signed or unsigned comparisons.

The less, equal and greater flags are only defined for signed and unsigned
comparisons.
