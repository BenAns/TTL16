Memory:
None of these instructions have an effect on the flags register.

LDVAL A, B:
    Loads value A to B
    A is a 12-bit value
    B is the destination register

LDMEM A, B:
    Loads value from address in register A to B
    A is a register containing the address to read from
    B is the destination register

STR A, B:
    Stores register B to address in register A
    A is a register containing the address to store to
    B is the source register

Arithmetic:
All these instructions take operands "A" and possible "B", representing
general purpose registers R0-R15, containing values used as inputs for the
corresponding arithmetic operation. The destination of an operation is always
R0.

All these will set the zero flag is the result of the calculation is 0, or clear it if
the result is not zero, but some instructions have additional flag behaviour.

ADD A, B:
    Sets R0 to the value of A + B
    Flags:
	Overflow flag - Set if A + B causes overflow, cleared otherwise

SUB A, B:
    Sets R0 to the value of A - B
    Flags:
	Overflow flag - Cleared if A - B causes underflow, set otherwise

NEG A:
    Sets R0 to the value of -A (negation)
    Flags:
	Overflow flag - Set if -A causes overflow, cleared otherwise

AND A, B:
    Sets R0 to A & B (bitwise AND)

OR A, B:
    Sets R0 to A | B (bitwise OR)

NOT A:
    Set R0 to ~A (complement)

XOR A, B:
    Sets R0 to A ^ B (bitwise XOR)

ARSH A:
    Sets R0 to the right arithmetic shift of A performed once
    Flags:
        Overflow flag - Set if a 1 bit is lost by the shift, cleared otherwise

LRSH A:
    Sets R0 to the right logical shift of A performed once
    Flags:
        Overflow flag - Set if a 1 bit is lost by the shift, cleared otherwise

ROL A:
    Sets R0 to the left rotation of A performed once

ROR A:
    Sets R0 to the right rotation of A performed once


Comparison:
The comparison instructions work on two operands, "A" and "B", which are general
purpose registers R0-R15. These comparisons are consider the values in these registers
rather than the register numbers themselves.

These instructions have the same flag behaviour:
    Less flag    - Set if A < B
    Equal flag   - Set if A = B
    Greater flag - Set if A > B

UCMP A, B:
    Compares A and B for effects on the flags register, using unsigned A and B

SCMP A, B:
    Compares A and B for effects on the flags register, using signed A and B


Branching:
All these instructions take an operand "A". This "A" can be an absolute address, an
address offset from PC or an address offset from any register R0-R15.

All of these have the same flag register behaviour:
    If using an absolute address, the zero flag is set if A is 0, otherwise it is
    cleared.

    If using an offset address, say from register R (PC or R0-R15) and offset D,
    then:
        Zero flag     - Set if R + D is 0, cleared otherwise
	Overflow flag - Set if R + D causes overflow, cleared otherwise

JMP A:
    Jumps execution to address A

JZ A:
    Jumps execution to address A if the zero flag is set

JNZ A:
    Jumps execution to address A if the zero flag is not set

JE A:
    Jumps execution to address A if the equal flag is set

JNE A:
    Jumps execution to address A if the equal flag is not set

JG A:
    Jumps execution to address A if the greater flag is set

JNG A:
    Jumps execution to address A if the greater flag is not set

JL A:
    Jumps execution to address A if the less flag is set

JNL A:
    Jumps execution to address A if the less flag is not set

JO A:
    Jumps execution to address A if the overflow flag is set

JNO A:
    Jumps execution to address A if the overflow flag is not set

JC A:
    Jumps execution to address A if the carry flag is set

JNC A:
    Jumps execution to address A if the carry flag is not set

RETI:
    Enable interrupts and return execution to the address in IV
